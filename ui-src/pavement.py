from paver.easy import *

@task
def build():
    runtime = []
    rtfile = path('src/transcrypt-runtime.js')
    for pyfile in path('src').files('*.py'):
        pyfile = path(pyfile)
        jsfile = path('src/' + pyfile.namebase + '.js')
        if jsfile.isfile() and pyfile.mtime < jsfile.mtime: continue

        sh('transcrypt -n -p .none ' + pyfile.relpath())
        outfile = path('src/__javascript__/' + pyfile.namebase + '.js')
        modfile = path(outfile.relpath()[:-3] + '.mod.js')

        if not runtime:
            runtime = ['// Transcrypt runtime code for React, do not edit']
            runtime.append('/* eslint-disable */')
            for line in outfile.lines()[3:]:
                if line[1:2] == '(': break
                # patch bug in current Transcrypt runtime
                if line[12:37] == 'for (var attrib in obj) {':
                    line = line[:31] + 'anObject' + line[34:]
                runtime.append(line)
            runtime.append('\nexport { dict, list, tuple }')
            rtfile.write_lines(runtime)

        imports = [
           '// Autogenerated file, do not edit',
           '\n// Imports for React']
        module = [
            '\n// Transcrypted Python module for React',
            '// eslint-disable-next-line',
            "import { dict, list, tuple } from './transcrypt-runtime'"]

        for line in modfile.lines()[2:]:
            line = line[2:]
            if line[:10] == '__pragma__': break
            if line[:7] == 'import ':
                imports.append(line)
            else:
                module.append(line)

        jsfile.write_lines(imports + module)

    # cleanup intermediate javascript
    sh('for x in `find . -name "__javascript__"`; do rm -rf $x; done')
