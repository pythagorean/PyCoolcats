from paver.easy import *

runtime = []
rtfile = path('src/transcrypt-runtime.js')
py_functions = ['dict', 'list', 'tuple', 'len', 'str', '__in__']

def transpile(pyfile):
    global runtime, rtfile, py_functions
    pyfile = path(pyfile)

    jsfile = path(pyfile.parent + '/' + pyfile.namebase + '.js')
    if jsfile.isfile() and pyfile.mtime < jsfile.mtime: return

    sh('transcrypt -n -p .none ' + pyfile.relpath())
    outfile = path(pyfile.parent + '/__target__/' + pyfile.namebase + '.js')

    if not runtime:
        rtoutfile = path(outfile.parent + '/org.transcrypt.__runtime__.js')
        runtime = ['// Transcrypt runtime code for React, do not edit']
        runtime.append('/* eslint-disable */')
        for line in rtoutfile.lines():
            if line[:2] == '//': continue
            runtime.append(line)
        rtfile.write_lines(runtime)

    imports = [
        '// Autogenerated file, do not edit',
        '/* eslint no-whitespace-before-property: "off" */',
        '/* eslint no-mixed-operators: "off" */',
        '// eslint-disable-next-line',
        ('import { ' + ', '.join(py_functions) + ' } ' +
            "from '" + '.' * pyfile.relpath().count('/') + '/' +
            "transcrypt-runtime'"),
        '// Imports for React'
        ]
    module = [
        '// Transcrypted Python module for React'
        ]

    mainstart = False
    for line in outfile.lines():
        if not mainstart:
            if line[:26] == "var __name__ = '__main__';":
                mainstart = True
            continue
        if line[:3] == "//#":
            break
        if line[:23] == "export var js_import = ":
            for js_import in line[24:-3].split('\\n'):
                if js_import: imports.append(js_import)
        else:
            if line[:11] == "export var ":
                line = line[7:]
            module.append(line)

    jsfile.write_lines(imports + module)

@task
def build():
    for dir in [path('src')] + path('src').dirs():
        for pyfile in dir.files('*.py'):
            transpile(pyfile)

    # cleanup intermediate javascript
    sh('for x in `find . -name "__target__"`; do rm -rf $x; done')

@task
def clean():
    global rtfile
    if rtfile.isfile(): sh('rm ' + rtfile)
    for dir in [path('src')] + path('src').dirs():
        for pyfile in dir.files('*.py'):
            jsfile = path(pyfile.parent + '/' + pyfile.namebase + '.js')
            if jsfile.isfile(): sh('rm ' + jsfile)
