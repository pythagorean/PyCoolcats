from paver.easy import *

runtime = []
rtfile = path('src/transcrypt-runtime.js')
py_functions = ['dict', 'list', 'tuple', 'len']

def transpile(pyfile):
    global runtime, rtfile, py_functions
    pyfile = path(pyfile)

    jsfile = path(pyfile.parent + '/' + pyfile.namebase + '.js')
    if jsfile.isfile() and pyfile.mtime < jsfile.mtime: return

    sh('transcrypt -n -p .none ' + pyfile.relpath())
    outfile = path(pyfile.parent + '/__javascript__/' + pyfile.namebase + '.js')
    modfile = path(outfile.relpath()[:-3] + '.mod.js')

    if not runtime:
        runtime = ['// Transcrypt runtime code for React, do not edit']
        runtime.append('/* eslint-disable */')
        for line in outfile.lines()[3:]:
            if line[1:2] == '(': break
            # patch bug in current Transcrypt runtime
            if line[12:37] == 'for (var attrib in obj) {':
                line = line[:31] + 'anObject' + line[34:]
            runtime.append(line)
        runtime.append('\nexport { ' + ', '.join(py_functions) + ' }')
        rtfile.write_lines(runtime)

    imports = [
       '// Autogenerated file, do not edit',
       '\n// Imports for React']
    module = [
        '\n// Transcrypted Python module for React',
        '/* eslint no-whitespace-before-property: "off" */',
        '/* eslint no-mixed-operators: "off" */',
        '// eslint-disable-next-line',
        ('import { ' + ', '.join(py_functions) + ' } ' +
            "from '" + '.' * pyfile.relpath().count('/') + '/' +
            "transcrypt-runtime'")
        ]

    for line in modfile.lines()[2:]:
        line = line[2:]
        if line[:10] == '__pragma__': break
        if line[:7] == 'import ':
            imports.append(line)
        else:
            module.append(line)

    jsfile.write_lines(imports + module)

@task
def build():
    for dir in [path('src')] + path('src').dirs():
        for pyfile in dir.files('*.py'):
            transpile(pyfile)

    # cleanup intermediate javascript
    sh('for x in `find . -name "__javascript__"`; do rm -rf $x; done')

@task
def clean():
    global rtfile
    if rtfile.isfile(): sh('rm ' + rtfile)
    for dir in [path('src')] + path('src').dirs():
        for pyfile in dir.files('*.py'):
            jsfile = path('src/' + pyfile.namebase + '.js')
            if jsfile.isfile(): sh('rm ' + jsfile)
